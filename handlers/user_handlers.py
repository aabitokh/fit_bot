from aiogram import Router, F, Dispatcher
from aiogram.types import Message, CallbackQuery
from lexicon.lexicon_ru import LEXICON_RU
from aiogram.filters import Command, CommandStart, StateFilter, or_f
from keyboards.start_keyboard import create_start_keyboard, choose_muscle_group
from keyboards.traning_keyboards import get_exc_markup, continiue_training_markp
from logger import logger 
from models.training import Training 
from datetime import datetime 
from aiogram.fsm.context import FSMContext

from aiogram.fsm.state import default_state, State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage

from db.db import exersices_for_muscle_group
from db.db import exersices, exc_list
from db.db_utils import add_trainig

logger = logger.get_logger()

class SetFSM(StatesGroup):
    muscle_group_trainig = State()
    set = State()


state_sets = SetFSM()
router = Router()

@router.message(CommandStart(), StateFilter(default_state))
async def process_start_command(message: Message):
    await message.answer(text=LEXICON_RU['/start'], reply_markup= create_start_keyboard())

@router.callback_query(F.data == 'start_training', StateFilter(default_state))
async def start_training(callback: CallbackQuery, state: FSMContext):
    
    logger.info('start training was pressed')

    #—Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ
    data = await state.get_data()
    training_data = data.get('training', {})
    training_data['start_training'] = str(datetime.now())
    await state.update_data(training=training_data)

    await callback.message.edit_text(
            text=LEXICON_RU['choose_muscle_group'],
            reply_markup=choose_muscle_group(), 
        )
    await callback.answer()

@router.callback_query(F.data == 'cancel')
async def cancel_training(callback: CallbackQuery):
    #TODO: save context if exists
    await callback.message.answer(
        text=f'–û–∫–µ–π, —Ç–æ–≥–¥–∞ —É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –µ—â–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ç–æ –ø—Ä–æ—Å—Ç–æ –∂–º—è–∫–Ω–∏ /start'
    )

@router.callback_query(F.data.in_(exersices.values()), StateFilter(default_state))
async def add_muscle_group(callback: CallbackQuery, state: FSMContext):
    
    logger.info(f"–≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –º—ã—à—Ü {callback.data}")

    data = await state.get_data()
    training_data = data.get('training', {})

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª—é—á 'muscle_group' –≤ training_data
    #TODO: –≤–æ—Ç —ç—Ç–æ—Ç –∫–ª—é—á –±—É–¥—Ç–æ –ª—É—á—à–µ —É–∂–µ –ø—Ä–∏ –≤–Ω–µ—Å–µ–Ω–∏–∏ –ø–æ–¥—Ö–æ–¥–æ–≤ –¥–æ–±–∞–≤–∏—Ç—å, –∞ –ø–æ–∫–∞ –º–µ–Ω—è—Ç—å current_muscle group 
    if 'muscle_group' not in training_data:
        training_data['muscle_group'] = {}
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –º—ã—à—Ü, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
    if callback.data not in training_data['muscle_group']:
        training_data['muscle_group'][callback.data] = {}

    
    await state.update_data(training=training_data)
    await state.update_data(current_muscle_group=callback.data)
    
    await callback.message.answer(
            text=f'‚úÖ –æ–∫–µ–π, —Ç—Ä–µ–Ω–∏—Ä—É–µ–º—Å—è, –≤—ã–±–∏—Ä–∞–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –º—ã—à—Ü!',
            reply_markup= get_exc_markup(callback.data)
        )
    await callback.answer()

@router.callback_query(F.data.in_(exc_list))
async def choose_hell(callback: CallbackQuery, state: FSMContext):
    #TODO: –∑–¥–µ—Å—å –Ω–∞–¥–æ –±—ã –≤–Ω–µ—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å cancel –Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏–µ —Å–¥–µ–ª–∞—Ç—å —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã –º—ã—à—Ü, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–ª–∏
    await state.set_state(SetFSM.muscle_group_trainig)
    logger.info('–±–æ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Ä–µ–∂–∏–º –≤–Ω–µ—Å–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –º—ã—à—Ü')


    data = await state.get_data()
    training_data = data.get('training', {})
    current_muscle_group = data.get('current_muscle_group')
    #–≤—ã–±—Ä–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è muscle group
    training_data['muscle_group'][current_muscle_group][callback.data] = []
    
    await state.update_data(training=training_data)
    await state.update_data(current_exercise=callback.data)

    await callback.message.answer(text='–î–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º –ø–æ–¥—Ö–æ–¥—ã, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏ –∏—Ö –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π —Å —Ç–∞–∫–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º: |–≤–µ—Å –ø–æ–≤—Ç–æ—Ä—ã, | ')
    await callback.answer()
    
    await state.set_state(SetFSM.set)
    logger.info('—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ –≤–Ω–µ—Å–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥—Ö–æ–¥–µ')


@router.message(StateFilter(SetFSM.set))
async def first_set(message:Message,  state: FSMContext):
    
    data = await state.get_data()
    training_data = data.get('training', {})
    current_muscle_group = data.get('current_muscle_group')
    current_exc = data.get('current_exercise') 
    logger.info(f"–≤–Ω–æ—Å–∏–º –ø–æ–¥—Ö–æ–¥—ã –¥–ª—è {current_exc}")
    training_data['muscle_group'][current_muscle_group][current_exc].append(message.text)
    
    logger.info(f'—Ç–µ–∫—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: {training_data}')

    await state.set_state(default_state)
    await message.answer(text=f'–í–Ω–µ—Å–µ–Ω–Ω–æ {message.text} –¥–ª—è {current_exc}, —á—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?', 
                         reply_markup=continiue_training_markp())

@router.callback_query(F.data == 'continiue_training', StateFilter(default_state))
async def continiue_training(callback: CallbackQuery, state: FSMContext, ):
    
    data = await state.get_data()
    training_data = data.get('training', {})
    current_muscle_group = data.get('current_muscle_group')


    logger.info(f'–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å {current_muscle_group}')
    
    await callback.message.answer( 
        text=f'üèãüèª –í—ã–±–∏—Ä–∞–π –Ω–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è {current_muscle_group}', 
        reply_markup= get_exc_markup(current_muscle_group)
    )
    await callback.answer()

@router.callback_query(F.data == 'choose_muscle_group', StateFilter(default_state))
async def change_mg(callback: CallbackQuery, state: FSMContext, ):
    
    data = await state.get_data()
    training_data = data.get('training', {})
    current_muscle_group = data.get('current_muscle_group')

    logger.info(f'–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –≥—Ä—É–ø–ø—É –º—ã—à—Ü —Å {current_muscle_group}')
    
    await callback.message.edit_text(
            text=LEXICON_RU['choose_muscle_group'],
            reply_markup=choose_muscle_group(), 
        )

    await callback.answer()

@router.callback_query(F.data == 'finish', StateFilter(default_state))
async def finish_training(callback: CallbackQuery,  state: FSMContext):
    
    logger.info("–ó–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
    data = await state.get_data()
    training_data = data.get('training', {})

    logger.info(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è {training_data}")

    t = Training(data = training_data)
    add_trainig(t)

    await state.update_data(training={})
    await state.update_data(current_muscle_group='')

    await callback.message.answer(
        text=f'–û–∫–µ–π, —Ç–æ–≥–¥–∞ —É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –µ—â–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —Ç–æ –ø—Ä–æ—Å—Ç–æ –∂–º—è–∫–Ω–∏ /start'
        )